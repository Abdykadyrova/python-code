#Задание 1:
# Вам дан список:
# numbers = [2,4,7,1,8.4,-3.3,7.1,-2,4,-1,7,-43,8,-3,6,9]
# Определите количество четных и не четных.
# numbers = [2,4,7,1,8.4,-3.3,7.1,-2,4,-1,7,-43,8,-3,6,9]
# v = 0
# b = 0
# for i in numbers:
#     if i % 2:
#         v += 1
#     else:
#         b +=1
# print('четные:',v ,'нечетные:', b)   
# # numbers = [v] = 1
# print(numbers)

    


# Задание 2:
# Дан список  целых чисел:
# numbers = [0,2,4,7,1,8,0,-3,7,0,-2,4,0,0,-1,7,-43,0,8,-3,6,9]
# Создайте новый лист и замените отрицательные числа на -1, положительные на число 1, ноль оставить без изменения.
# numbers = [0,2,4,7,1,8,0,-3,7,0,-2,4,0,0,-1,7,-43,0,8,-3,6,9]
# num = []
# for i in numbers:
#     if i == 0:
#         num.append(0)
#     elif i > 0:
#         num.append(1)
#     else:
#         num.append(-1)

# print(num)




 
# v = 0
# b = 0
# for i in numbers:
#     if i % 2:
#         v += 1
#     else:
#         b +=1
# print('четные:',v ,'нечетные:', b)   
# # numbers = [v] = 1
# print(numbers) 
# Задание 3:
# my_list = [2,4,6,8,10,1,3,5,7,9,11,13,17]
# Выведите все элементы списка с четными ИНДЕКСАМИ (то есть A[0], A[2], A[4], ... ])


# Задание 4:
# Спрсите у пользователя строку НА Английском или целое предложение и удалите все глассные буквы там.
# То что осталось от строки выведите на экран.
# Строка не должна быть короче 10 символов.
unduulor = ['a',]
word = input('write text in English: ')

print(word)

 


# Класс Alphabet
# 1. Создайте класс Alphabet
# 2. Создайте метод init(), внутри которого будут определены два динамических свойства: 1) lang - язык и 2) letters - список букв. Начальные значения свойств берутся из входных параметров метода.
# 3. Создайте метод print(), который выведет в консоль буквы алфавита
# 4. Создайте метод letters_num(), который вернет количество букв в алфавите


# Задание 6:
# Класс EngAlphabet
# 1. Создайте класс EngAlphabet путем наследования от класса Alphabet
# 2. Создайте метод init(), внутри которого будет вызываться родительский метод init(). В качестве параметров ему будут передаваться обозначение языка(например, 'En') и строка, состоящая из всех букв алфавита(можно воспользоваться свойством ascii_uppercase из модуля string).
# 3. Добавьте приватное статическое свойство letters_num, которое будет хранить количество букв в алфавите.
# 4. Создайте метод is_en_letter(), который будет принимать букву в качестве параметра и определять, относится ли эта буква к английскому алфавиту.
# 5. Переопределите метод letters_num() - пусть в текущем классе классе он будет возвращать значение свойства letters_num.
# 6. Создайте статический метод example(), который будет возвращать пример текста на английском языке.



# Задание 7:
###Страны###
 
# countries_of_east = [Singapore, Malaysia, Indonesia, Hawaii]
# countries_of_central_asia = [Kyrgyzstan, Kazakhstan, Tajikistan, Uzbekistan]
# countries_of_europe = [Italy, France, Germany, Switzerland, Ireland]
# countries_of_america = [Mexico, USA, Brazil, Columbia, Canada]
 
###Классы###
 
# classes = [Business, Middle, Econom]
# Так получилось что не все рейсы доступны всегда.
 
# Представьте что есть переменные:
# user_order_0 = 'Brazil'
# user_order_1 = 'Madagaskar'
# user_order_2 = 'Kyrgyzstan'
# user_order_3 = 'Italy'
# user_order_4 = 'Argentina'
# user_order_5 = 'Malasia'
 
# class_0 = 'Business'
# class_1 = 'Middle'
# class_2 = 'Econom'
 
 
# каждая из этих переменных - заказ пользователя который хочет полететь в указанную страну.
# Так как вы серьёзная компания, у вас имеется ряд правил:
 
# 1. Если у вас не нашлось билета в страну куда хочет клиент, вы ему вежливо говорите: "Простите рейсов в эту страну пока нет..."
# 2. Бизнес класс доступен только для следующих стран: Germany, Tajikistan, Hawaii, Canada
# 3. Эконом класс доступен только для следующих стран: Kazakhstan, Switzerland, Singapore, Columbia
# 4. Если у вас имеется билет в эту страну - вы пишите пользователю следующее:
#        "Ваш рейс найден! Ваш класс {здесь имя класса}".
# 5. Если для этого рейса есть особый класс(Бизнес или Эконом) вы выводите именно его иначе по умолчанию стоит "Middle"
 